# -*- coding: utf-8 -*-
"""Kras Misclassification and Model Performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nAKc4cf4h1xmtWQAwgupyUgdNpOYcPUz
"""

from tensorflow.keras.models import load_model
model = load_model("Mnist_simple_cnn.keras")

from tensorflow.keras.datasets import mnist
(x_train, y_train),(x_test,y_test) = mnist.load_data()

import numpy as np

x_test = x_test.reshape(10000,28,28,1)
print(x_test.shape)

print("Predicting classes for all  100000 test images")
pred = np.argmax(model.predict(x_test),axis=1)
print(pred)

import cv2
import numpy as np
result = np.absolute(y_test-pred)
misclassified_indeces = np.nonzero(result>0)

print(f"Indeces of misclassifed are :\n{misclassified_indeces}")

import matplotlib.pyplot as plt
L = 5
W = 5
fig,axes = plt.subplots(L,W,figsize=(12,12))
axes = axes.ravel()

for i in np.arange(0,L*W):
  input_im = x_test[misclassified_indeces[0][i]]
  ind = misclassified_indeces[0][i]
  # Use 'model' instead of 'classifier' and 'predict' instead of 'predict_classes'
  predicted_class = str(np.argmax(model.predict(input_im.reshape(1,28,28,1),verbose=0))) # Predict class using the loaded model
  axes[i].set_title(f"Prediction Class = {predicted_class}\n Original Class = {y_test[ind]}")
  axes[i].axis('off')
plt.subplots_adjust(wspace=0.5)

from sklearn.metrics import confusion_matrix
import numpy as np
x_test = x_test.reshape(10000,28,28,1)
y_pred = np.argmax(model.predict(x_test),axis=-1)

print(confusion_matrix(y_test,y_pred))

